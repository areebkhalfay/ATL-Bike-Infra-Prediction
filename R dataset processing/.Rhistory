workload_vs_group_boxplot_frustration <- analysis_data %>%
mutate(
user_group = factor(user_group, levels = c("control", "card", "in-situ")),
user_group = recode(user_group,
"control" = "Control",
"card" = "Documentation",
"in-situ" = "In-situ"),
) %>%
ggplot(aes(x = user_group, y = Q2_6, fill = user_group)) +
geom_violin()+
geom_jitter(width = 0.1, alpha = 0.7) +
stat_summary(fun = median, geom = "crossbar", width = 0.3, color = "black") +
scale_y_continuous(breaks = seq(0, 18, by = 3), limits = c(0, 18)) +  # Added limits
scale_fill_manual(values = c("In-situ" = "#e67e22", "Control" = "#2ecc71", "Documentation" = "#3498db")) +
boxplot_theme+
labs(
title = "Frustration Rating",
x = "",
y = "") +
theme(
plot.title = element_text(size = 18, hjust = 0.5),
legend.position = 'none',
axis.text.y = element_blank(),
axis.text.x = element_text(size=15)
)
print(workload_vs_group_boxplot_effort + workload_vs_group_boxplot_frustration)
workload_vs_group_boxplot_frustration <- analysis_data %>%
mutate(
user_group = factor(user_group, levels = c("control", "card", "in-situ")),
user_group = recode(user_group,
"control" = "Control",
"card" = "Documentation",
"in-situ" = "In-situ"),
) %>%
ggplot(aes(x = user_group, y = Q2_6, fill = user_group)) +
geom_violin()+
geom_jitter(width = 0.1, alpha = 0.7) +
stat_summary(fun = median, geom = "crossbar", width = 0.3, color = "black") +
scale_y_continuous(breaks = seq(0, 18, by = 3), limits = c(0, 18)) +  # Added limits
scale_fill_manual(values = c("In-situ" = "#e67e22", "Control" = "#2ecc71", "Documentation" = "#3498db")) +
boxplot_theme+
labs(
title = "Frustration Rating",
x = "",
y = "") +
theme(
plot.title = element_text(size = 18, hjust = 0.5),
legend.position = 'none',
axis.text.y = element_blank(),
axis.text.x = element_text(size=15),
axis.title.x = element_test(size=15)
)
workload_vs_group_boxplot_frustration <- analysis_data %>%
mutate(
user_group = factor(user_group, levels = c("control", "card", "in-situ")),
user_group = recode(user_group,
"control" = "Control",
"card" = "Documentation",
"in-situ" = "In-situ"),
) %>%
ggplot(aes(x = user_group, y = Q2_6, fill = user_group)) +
geom_violin()+
geom_jitter(width = 0.1, alpha = 0.7) +
stat_summary(fun = median, geom = "crossbar", width = 0.3, color = "black") +
scale_y_continuous(breaks = seq(0, 18, by = 3), limits = c(0, 18)) +  # Added limits
scale_fill_manual(values = c("In-situ" = "#e67e22", "Control" = "#2ecc71", "Documentation" = "#3498db")) +
boxplot_theme+
labs(
title = "Frustration Rating",
x = "",
y = "") +
theme(
plot.title = element_text(size = 18, hjust = 0.5),
legend.position = 'none',
axis.text.y = element_blank(),
axis.text.x = element_text(size=15),
axis.title.x = element_text(size=15)
)
print(workload_vs_group_boxplot_effort + workload_vs_group_boxplot_frustration)
workload_vs_group_boxplot_frustration <- analysis_data %>%
mutate(
user_group = factor(user_group, levels = c("control", "card", "in-situ")),
user_group = recode(user_group,
"control" = "Control",
"card" = "Documentation",
"in-situ" = "In-situ"),
) %>%
ggplot(aes(x = user_group, y = Q2_6, fill = user_group)) +
geom_violin()+
geom_jitter(width = 0.1, alpha = 0.7) +
stat_summary(fun = median, geom = "crossbar", width = 0.3, color = "black") +
scale_y_continuous(breaks = seq(0, 18, by = 3), limits = c(0, 18)) +  # Added limits
scale_fill_manual(values = c("In-situ" = "#e67e22", "Control" = "#2ecc71", "Documentation" = "#3498db")) +
boxplot_theme+
labs(
title = "Frustration Rating",
x = "",
y = "") +
theme(
plot.title = element_text(size = 18, hjust = 0.5),
legend.position = 'none',
axis.text.y = element_blank(),
axis.text.x = element_text(size=15),
axis.title.x = element_text(size=12)
)
print(workload_vs_group_boxplot_effort + workload_vs_group_boxplot_frustration)
workload_vs_group_boxplot_frustration <- analysis_data %>%
mutate(
user_group = factor(user_group, levels = c("control", "card", "in-situ")),
user_group = recode(user_group,
"control" = "Control",
"card" = "Documentation",
"in-situ" = "In-situ"),
) %>%
ggplot(aes(x = user_group, y = Q2_6, fill = user_group)) +
geom_violin()+
geom_jitter(width = 0.1, alpha = 0.7) +
stat_summary(fun = median, geom = "crossbar", width = 0.3, color = "black") +
scale_y_continuous(breaks = seq(0, 18, by = 3), limits = c(0, 18)) +  # Added limits
scale_fill_manual(values = c("In-situ" = "#e67e22", "Control" = "#2ecc71", "Documentation" = "#3498db")) +
boxplot_theme+
labs(
title = "Frustration Rating",
x = "",
y = "") +
theme(
plot.title = element_text(size = 18, hjust = 0.5),
legend.position = 'none',
axis.text.y = element_blank(),
axis.text.x = element_text(size=12),
axis.title.x = element_text(size=12)
)
print(workload_vs_group_boxplot_effort + workload_vs_group_boxplot_frustration)
workload_vs_group_boxplot_effort <- analysis_data %>%
mutate(
user_group = factor(user_group, levels = c("control", "card", "in-situ")),
user_group = recode(user_group,
"control" = "Control",
"card" = "Documentation",
"in-situ" = "In-situ"),
) %>%
ggplot(aes(x = user_group, y = Q2_5, fill = user_group)) +
geom_violin()+
geom_jitter(width = 0.05, alpha = 0.8) +
stat_summary(fun = median, geom = "crossbar", width = 0.3, color = "black") +
scale_fill_manual(values = c("In-situ" = "#e67e22", "Control" = "#2ecc71", "Documentation" = "#3498db")) +
scale_y_continuous(breaks = seq(0, 18, by = 3), limits = c(0, 18)) +  # Added limits
labs(
title = "Effort Rating",
x = "",
y = "") +
boxplot_theme+
theme(
plot.title = element_text(size = 18, hjust = 0.5),
legend.position = 'none',
axis.text.y = element_text(size=15),
axis.text.x = element_text(size=12)
)
workload_vs_group_boxplot_frustration <- analysis_data %>%
mutate(
user_group = factor(user_group, levels = c("control", "card", "in-situ")),
user_group = recode(user_group,
"control" = "Control",
"card" = "Documentation",
"in-situ" = "In-situ"),
) %>%
ggplot(aes(x = user_group, y = Q2_6, fill = user_group)) +
geom_violin()+
geom_jitter(width = 0.05, alpha = 0.8) +
stat_summary(fun = median, geom = "crossbar", width = 0.3, color = "black") +
scale_y_continuous(breaks = seq(0, 18, by = 3), limits = c(0, 18)) +  # Added limits
scale_fill_manual(values = c("In-situ" = "#e67e22", "Control" = "#2ecc71", "Documentation" = "#3498db")) +
boxplot_theme+
labs(
title = "Frustration Rating",
x = "",
y = "") +
theme(
plot.title = element_text(size = 18, hjust = 0.5),
legend.position = 'none',
axis.text.y = element_blank(),
axis.text.x = element_text(size=12),
)
print(workload_vs_group_boxplot_effort + workload_vs_group_boxplot_frustration)
workload_vs_group_boxplot_effort <- analysis_data %>%
mutate(
user_group = factor(user_group, levels = c("control", "card", "in-situ")),
user_group = recode(user_group,
"control" = "Control",
"card" = "Documentation",
"in-situ" = "In-situ"),
) %>%
ggplot(aes(x = user_group, y = Q2_5, fill = user_group)) +
geom_violin()+
geom_jitter(width = 0.05, alpha = 0.8) +
stat_summary(fun = median, geom = "crossbar", width = 0.4, color = "black") +
scale_fill_manual(values = c("In-situ" = "#e67e22", "Control" = "#2ecc71", "Documentation" = "#3498db")) +
scale_y_continuous(breaks = seq(0, 18, by = 3), limits = c(0, 18)) +  # Added limits
labs(
title = "Effort Rating",
x = "",
y = "") +
boxplot_theme+
theme(
plot.title = element_text(size = 18, hjust = 0.5),
legend.position = 'none',
axis.text.y = element_text(size=15),
axis.text.x = element_text(size=12)
)
workload_vs_group_boxplot_frustration <- analysis_data %>%
mutate(
user_group = factor(user_group, levels = c("control", "card", "in-situ")),
user_group = recode(user_group,
"control" = "Control",
"card" = "Documentation",
"in-situ" = "In-situ"),
) %>%
ggplot(aes(x = user_group, y = Q2_6, fill = user_group)) +
geom_violin()+
geom_jitter(width = 0.05, alpha = 0.8) +
stat_summary(fun = median, geom = "crossbar", width = 0.4, color = "black") +
scale_y_continuous(breaks = seq(0, 18, by = 3), limits = c(0, 18)) +  # Added limits
scale_fill_manual(values = c("In-situ" = "#e67e22", "Control" = "#2ecc71", "Documentation" = "#3498db")) +
boxplot_theme+
labs(
title = "Frustration Rating",
x = "",
y = "") +
theme(
plot.title = element_text(size = 18, hjust = 0.5),
legend.position = 'none',
axis.text.y = element_blank(),
axis.text.x = element_text(size=12),
)
print(workload_vs_group_boxplot_effort + workload_vs_group_boxplot_frustration)
print(workload_vs_group_boxplot_effort + workload_vs_group_boxplot_frustration)
current_width <- dev.size()[1]
current_height <- dev.size()[2]
# Save with the same aspect ratio as what you see on screen
ggsave(here("output","plots","workload_effort_frustration.png"),
plot = workload_vs_group_boxplot_effort + workload_vs_group_boxplot_frustration,
width = current_width,      # Use current width
height = current_height,    # Use current height
dpi = 300,                  # High resolution
bg = "white")
#workload_anova_indiv <- aov(Q2_6 ~ user_group, data = analysis_data)
#summary(workload_anova_indiv)
#TukeyHSD(workload_anova_indiv)
combined_riskevolution_plot <- evolution_weapon_mode_ratio_plot + evolution_target_mode_ratio_plot +
plot_layout(guides = "collect") +
plot_annotation(
title = "Evolution of Risk Tolerance to AI from Round 1 to 4",
theme = theme(
plot.subtitle = element_text(hjust = 0.5, size = 12),
plot.title.position = "plot",
plot.title = element_text(hjust = 0.5, size=17),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 15),
legend.key.size = unit(1.5, "lines")
))
print(combined_riskevolution_plot)
# First plot (weapon)
evolution_weapon_mode_ratio_plot <- analysis_data %>%
mutate(user_group = factor(user_group, levels = c("control", "card", "in-situ")),
user_group = recode(user_group,
"control" = "Control",
"card" = "Documentation",
"in-situ" = "In-situ")
) %>%
pivot_longer(cols = starts_with("manual_weapon_time_percentage_round"), names_to = "round", values_to = "percentage") %>%
mutate(round = as.numeric(str_extract(round, "\\d+"))) %>%
ggplot(aes(
x = round,
y = percentage,
color = user_group,
group = user_group
)) +
geom_jitter(width = 0.1, alpha = 0.9,size=1) +
stat_summary(fun = mean, geom = "line", linewidth = 2) +
scale_color_manual(
values = c("In-situ" = "#FF8C00", "Control" = "#2ecc71", "Documentation" = "#0072B2"),
labels = c("Control", "Documentation", "In-situ")
) +
boxplot_theme +
theme(
plot.title = element_text(size = 14, hjust = 0.5),  # Added plot title styling
legend.position = "none",
axis.title = element_text(size = 18),
axis.text = element_text(size = 15),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_line(color = "gray95")
) +
scale_x_continuous(breaks = 1:4) +
scale_y_continuous(
limits = c(0, 100),
breaks = seq(0, 100, by = 25)
) +
labs(
title = "Weapon Mode Usage",
x = "Round",
y = "% Time in Mode"
)
# Second plot (target)
evolution_target_mode_ratio_plot <- analysis_data %>%
mutate(user_group = factor(user_group, levels = c("control", "card", "in-situ")),
user_group = recode(user_group,
"control" = "Control",
"card" = "Documentation",
"in-situ" = "In-situ")
) %>%
pivot_longer(
cols = starts_with("manual_target_time_percentage_round"), names_to = "round", values_to = "percentage") %>%
mutate(round = as.numeric(str_extract(round, "\\d+"))) %>%
ggplot(aes(
x = round,
y = percentage,
color = user_group,
group = user_group
)) +
geom_jitter(width = 0.1, alpha = 0.9,size=1) +
stat_summary(fun = mean, geom = "line",linewidth = 2) +
scale_color_manual(
values = c("In-situ" = "#FF8C00", "Control" = "#2ecc71", "Documentation" = "#0072B2"),
labels = c("Control", "Documentation", "In-situ")
) +
boxplot_theme +
theme(
plot.title = element_text(size = 14, hjust = 0.5),  # Added plot title styling
legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(size = 15),
axis.title.x = element_text(size = 18),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
legend.text = element_text(size = 15),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_line(color = "gray95")
) +
scale_x_continuous(breaks = 1:4) +
scale_y_continuous(
limits = c(0, 100),
breaks = seq(0, 100, by = 25)
) +
labs(
title = "Target Mode Usage",  # Added plot title
x = "Round",
y = ""
)
combined_riskevolution_plot <- evolution_weapon_mode_ratio_plot + evolution_target_mode_ratio_plot +
plot_layout(guides = "collect") +
plot_annotation(
title = "Evolution of Risk Tolerance to AI from Round 1 to 4",
theme = theme(
plot.subtitle = element_text(hjust = 0.5, size = 12),
plot.title.position = "plot",
plot.title = element_text(hjust = 0.5, size=17),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 15),
legend.key.size = unit(1.5, "lines")
))
print(combined_riskevolution_plot)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.align = 'center')
library(tidyverse)
library(readxl)
library(here)
library(scales)
library(patchwork)
#library(xlsx)
library(openxlsx)
library(knitr)
library(kableExtra)
library(writexl)
group_colors <- c("control" = "#2ecc71", "card" = "#3498db", "in-situ" = "#e67e22")
# control_palette <- colorRampPalette(c("#2ecc71", "#1b7943"))(4)  # Green shades
# card_palette <- colorRampPalette(c("#3498db", "#1a5075"))(4)     # Blue shades
# insitu_palette <- colorRampPalette(c("#e67e22", "#8f4c12"))(4)   # Orange shades
# General theme for boxplots
general_theme <- list(
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)))
boxplot_theme <- list(
#scale_fill_manual(values = group_colors),
theme_gray(),
theme(
plot.title = element_text(hjust = 0.5, size = 17),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "none"  # Add this to the boxplot_theme
)
)
################ Set filenames ################
demographics_file <- here("data", "raw", "maisr_demographics_export.xlsx")
finalsurvey_raw_filename <- here("data","raw","maisr_final_survey_export.xlsx")
timeslots_file <- here("data", "raw", "maisr_experiment_timeslots.xlsx")
gamedata_raw_filename <- here("data","raw","maisr_gamedata.xlsx")
demographics_processed_file <-
here("data", "processed", "demographics_processed.rds")
finalsurvey_processed_full_filename <-
here("data","processed", "finalsurvey_processed_full.rds")
finalsurvey_processed_selected_filename <-
here("data","processed", "finalsurvey_processed_selected.rds")
# sagat_survey_processed_filename <- TODO
gamedata_processed_full_filename <-
here("data", "processed", "gamedata_processed_full.rds")
gamedata_processed_selected_filename <-
here("data", "processed", "gamedata_processed_selected.rds")
insitu_comparison_data <- analysis_data %>%
filter(user_group == "in-situ") %>%
mutate(
early_rounds = (autonomous_time_percentage_round1 + autonomous_time_percentage_round2)/2,
later_rounds = (autonomous_time_percentage_round3 + autonomous_time_percentage_round4)/2
)
# Run paired t-test
t_test_result <- t.test(
insitu_comparison_data$early_rounds,
insitu_comparison_data$later_rounds,
paired = TRUE
)
# Print results
print(t_test_result)
setwd("C:/Users/Ryan/PycharmProjects/ml7641project/R dataset processing")
load("C:/Users/Ryan/PycharmProjects/ml7641project/R dataset processing/.RData")
pca_data <- nyc_data_normalized %>%
select(where(is.numeric)) # Select only numeric columns for PCA
library(tidyverse)
library(readxl)
library(writexl)
library(here)
library(ggplot2)
library(dplyr)
library(patchwork)
library(broom)
# Step 1: Prepare your data
pca_data <- nyc_data_normalized %>%
select(where(is.numeric)) # Select only numeric columns for PCA
# Step 2: Perform PCA
pca_result <- pca_data %>%
scale() %>% # Standardize variables (important for PCA)
prcomp()
# Step 3: Examine the results
# Summary of PCA
summary(pca_result)
loadings <- pca_result %>%
tidy(matrix = "rotation") %>%
pivot_wider(names_from = "PC", values_from = "value", names_prefix = "PC")
# Extract the variance explained by each component
variance_explained <- pca_result %>%
tidy(matrix = "eigenvalues")
# Step 4: Visualize PCA results
pca_biplot <- pca_result %>%
augment(pca_data) %>%
ggplot(aes(.fittedPC1, .fittedPC2, color = iris$Species)) +
geom_point(size = 2, alpha = 0.7) +
theme_minimal() +
labs(
x = paste0("PC1: ", round(variance_explained$percent[1], 1), "% of variance"),
y = paste0("PC2: ", round(variance_explained$percent[2], 1), "% of variance"),
title = "PCA of Iris Dataset",
color = "Species"
)
print(pca_biplot)
summary(pca_result)
# Extract component loadings
loadings <- pca_result %>%
tidy(matrix = "rotation") %>%
pivot_wider(names_from = "PC", values_from = "value", names_prefix = "PC")
# Extract the variance explained by each component
variance_explained <- pca_result %>%
tidy(matrix = "eigenvalues")
# Step 4: Visualize PCA results
pca_biplot <- pca_result %>%
augment(pca_data) %>%
ggplot(aes(.fittedPC1, .fittedPC2)) +
geom_point(size = 2, alpha = 0.7) +
theme_minimal() +
labs(
x = paste0("PC1: ", round(variance_explained$percent[1], 1), "% of variance"),
y = paste0("PC2: ", round(variance_explained$percent[2], 1), "% of variance"),
title = "PCA of Iris Dataset",
)
print(pca_biplot)
loadings_plot <- arrow_style <- arrow(length = unit(0.2, "cm"))
loadings_plot <- pca_result %>%
tidy(matrix = "rotation") %>%
pivot_wider(names_from = "PC", values_from = "value") %>%
ggplot(aes(PC1, PC2)) +
geom_segment(aes(xend = PC1 * 5, yend = PC2 * 5),
arrow = arrow_style, color = "red") +
geom_text(aes(label = column), hjust = -0.2) +
coord_fixed() +
theme_minimal()
print(loadings_plot)
# Step 4: Visualize PCA results
pca_biplot <- pca_result %>%
augment(pca_data) %>%
ggplot(aes(.fittedPC1, .fittedPC2)) +
geom_point(size = 2, alpha = 0.7) +
theme_minimal() +
labs(
x = paste0("PC1: ", round(variance_explained$percent[1], 1), "% of variance"),
y = paste0("PC2: ", round(variance_explained$percent[2], 1), "% of variance"),
title = "PCA of Iris Dataset",
)
print(pca_biplot)
variance_explained <- pca_result %>%
tidy(matrix = "eigenvalues")
variance_explained
print(pca_result$rotation)
